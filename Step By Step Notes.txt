What We Will be learning:
HTML5
CSS3 - Transitions/Grid/Flex
Sass
NPM Package Manager
JavaScript
Git

Project Requirements:
-VSCode (optional)
-node.js
-git-scm

***Steps Will Go By Video!**

**Video 1** - https://www.youtube.com/watch?v=gYzHS-n2gqU&list=PL2pl1NLEXKMQeu3ITqNNfUbMyPl0dQxjo&index=4&t=0s

-Introduction
-Setup the workflow
	-install node sass. we want to set it up that when we create any sass in the css folder it is compiled to the 'dist' folder
1. Install Node.js - a JavaScript runtime
	-comes with something called npm(node package manager) 
	-the compile tool we're using for 'sass' is 'node sass' which is why we need npm
2. Install git
3. Open VSCode and install these extensions:
	-Live Server
		-allows us to load our html on autolaod(no need to refresh our webpage)
	-Bracket Pair Colorizer
		-Matches colours of brackets to help distinguish code
	-Prettier
		-code formatter.automatiaclly formats your code on save
		-to make code format on save:
			- settings > Text editor > format on save = true
4.Create 'dist' folder
	-This is where all HTML goes, all compiled css, js, images
	-create a index.html file within
5.Open index.html
6. To quickly create elements type e.g. 'h1.test' and it will 
automatically give you the option to finish the tag h1 with a class tag.
	-you can do this to create a h1 with a id instead as well 'h1#test'
7. With VSCode, you can automatically generate the basic HTML markup with 'type ! then press tab'
8. You can right click your html and open the html file through the 'live server' extension
9. Create a folder outside 'dist' called 'sass' and create a 'main.scss' file within it
	-any other files will be partials to the main.scss
	-we need to compile the scss to css because the browser doesn't read scss files
		-to solve this we use node-sass using a 'npm' command
10. Open the VSCode terminal
	- ctrl + `
	-run npm init
	-fill out the basic information regarding the website
	-run 'npm i no de-sass'
	-all this basic information will be stored in the package.json
11. if we install anything with 'npm' it will be placed in package.json under the
'dependencies' object as well as within the 'node_modules folder'
NOTE: package.json is pretty much a manifest for our project
12. within the package.json we have a "scripts" object
	-change the "test" to "sass"
	-the sass currently just echos an error message
	-to run an object within the script	
		-go to 'live terminal'
		-type 'npm run ['name of script']'
13. within the sass script objects
	-change value to "node-sass" -w scss/ -o (-w means 'watch' and -o means 'output')
		-"sass": "node-sass -w scss/ -o dist/css --recursive"
14. now run the script in the terminal by calling it: 'npm run sass'
15. Now we can go to the main.scss, create a variable $primary-color and set it to a color		
	-we set the body { background-color: $primary-color }
16. save the main.scss and a css folder will be generated within the dist folder
with a main.css
17. IMPORTANT: DO NOT TOUCH THE MAIN.CSS FILE. THIS IS THE COMPILED CSS THAT IS GENERATED
WHEN YOU SAVE THE MAIN.SCSS FILE; we want to work through out main.scss
18. Open a new terminal: terminal > new terminal
	-we're going to create a git repository
	-run 'touch .gitignore'
	-NOTE: terminal didn't work so do this:
		-locate the project folder in file explorer
		-right click the folder and right click and select 'git bash here'
		-run the touch code above
19. add 'node_modules' to .gitignore	
	-we don't want this to be added to our git repository
20. run git init	
	-creates a hidden folder called '.git' and all of our
	repository stuff will go in there
21. 'git add .' will everything you've done so far to the repository
22. Commit to the repository; we are still in the staging area
	-git commit -m 'Initial workflow setup'
	-note: traversy media has a 'git crash course' video



Video 2 -  Homepage & Main Sass

<Creating the Header>
1. go to index.html
2. create a header tag
	-within this tag create a div with class 'menu-btn' using: .menu-btn
	-within this div create 3 more divs with class 'btn-line': .btn-line*3
3. create a nav tag 
	-within it create 2 divs with a class 'menu-branding' in the first
	and 'menu-nav' in the second one
4. within menu-branding add another div with class portrait
5. within the ul add a li with class nav item and
	-within the li item add an 'a.nav-link'
6. Highlight the entire first li element and use 'shift + alt + down arrow'
to create 3 more of the same list item
</Creating the Header>

<Creating the main>
1.Create the main element section with id="home"
2.Create an h1 with class 'lg-heading' with a span within it for the last
name with class 'text-secondary'
3.Create an h2 with class 'sm-heading' with a description of what your occupation is
4. go to https://fontawesome.com/start and copy the link provided and implement it within your html head
5. under the h2 add a div.icons
	-here we will use the fontawesome classes that are provided and use
	the social media icons for twitter, facebook, linkedin, and github
6.under the div.icons, right above the body tag implement the main.js script
7. inside the dist folder, create a js folder with a main.js file inside it
</Creating the main>

<inside main.scss>
1. make the webpage have a box-sizing property of border-box
	-this ensures that if there is any padding within the border box,
	the padding will be within the box node_modules
2. inside body:
	-add height: 100%
	-set margin to 0
	-set font-family to segoe
	-set line-height to 1.5
3. create a style for the headings so they have:
	-font weight: 400
	-margin: 0
4. within the heading styles create a nested style for the 
class lg-heading	
	-we can use & to locate the element that contains the class 'lg-heading' - &.lg-heading
	-set the font-size to 6rem
NOTE: 'rem' unit is basically a multiplier of the html tag's font size (default is 16px)
	-16px * 6(1 rem = 16px) = 96px 
5. do the same thing for the sm-heading '&.sm-heading'
	-give it a margin bottom: 2rem
	-padding: 0.2rem 1rem
	-with sass with can use the lighten() function which accepts 2 parameters
		-the color
		-how light you want it to be
	surround the lighten function with an rgba function to add an opacity of 0.5
6. Make the links white and set the text-decoration to none;
7. for the header element, give it a position of fixed so that it will always stay 
at the top
	-give z-index: 2; 
		-z-index represents how close the element is to you. the higher the index, the closer it is to you
	-width: 100%;
8. styling for .text-secondary	
	-create another variable: $secondary-color: #eece1a
	-within the .text-secondary give it a color value of the new variable we just made
9.
main {
  padding: 4rem;
  height: 100%;

  .icons { //nested within the main, this will style everything within .icons
    margin-top: 1rem;
    a {
      padding: 0.4rem;

      &:hover {
        color: $secondary-color; //changes the color of a elements to the secondary color
		transition: all 0.5s ease-out //this style allows a transition to whatever you give it to.
									  //in this case its when you hover over the icons. the color of the icons will transition to the secondary
									  //color when you hover over it in 0.5s with an ease-out way
	  }
    }
  }
}
10. within the a.hover
	-transition: all 0.5s ease-out //this style allows a transition to whatever you give it to.
	//in this case its when you hover over the icons. the color of the icons will transition to the secondary
	//color when you hover over it in 0.5s with an ease-out way
11. there is a better way of doing step 10 which is using @mixin functions
	-create a @mixin @easeOut under the declared variables at the top of the main.scss
	-implement the transition: 
		-transition: all 0.5s ease-out
	-back within the hover we can now just call the mixin using @include
		-@include easeOut();
12. within the main, add a nexted style for &#home
	-give it a overflow of hidden which hides scrollbars
	-implement another nested style for the h1
		-margin top: give it a viewport height of 20vh
13. create 3 new variables for the background images
	-$show-home-image: true;
	-$home-image: url(..img/main-banner.jpg);
	-$background-opacity: 0.9;
14. create a mixin to implement the background image
	-@mixin background {
	@if $show-home-image {
		&#bg-img {
		background: $home-image;
		background-attachment: fixed; //
      	background-size: cover;
		}
	}
	}
	-add @include background; to the top of the body styling rules
15. at this point the text is barely readable; we need an overlay
	-create a new div with class overlay in index html under the body tag
	-back in the scss under your background function within the #bg-img
	styling, create a new rule for .overlay
16. in .overlay{}
	-give the position: absolute;
	-top: 0
	-right: 0
	-width: 100%;
    -height: 100%;
	-an rgba() funtion so we can apply opacity to the color + background img
	-background: rgba($primary-color, $background-opacity);
     -z-index: -1; //this pushes the overlay behind everything else
17. we can actually remove the overlay class and change step 16 with :after
	-change the style from .overlay to :after. after everything is applied
	to #bg-img, the overlay styling will be applied 'after'
	-also add a content:'';, which is what we add after you use :after or :before
	if you want to add any content
	-&:after {
        content: ""; //always add this when you use :after
        position: absolute;
        top: 0;
        right: 0;
        width: 100%;
        height: 100%;
        background: rgba($primary-color, $background-opacity);
        z-index: -1;
      }
18. Create a seperate file inside your scss folder to move all the 
variables and mixins in your main.scss to it since they take up alot of space
	-_config.scss
19. Now at the top of your main.scss:
	-@import 'config';
20. commit everything
	-git add .
	-git commit -m 'Index & markup & main sass'
</inside main.scss>


**Video 3**
<_menu.scss>
1. create a new file in the scss folder called _menu.scss
2. import the new _menu.scss file in the main.scss
3. Styling the .menu-btn:
// Menu Button
.menu-btn {
  position: absolute; //we want it exactly where we want it to be
  z-index: 3;
  right: 35px;
  top: 35px;
  cursor: pointer;
  @include easeOut;

  .btn-line {
    width: 28px;
    height: 3px;
    margin: 0 0 5px 0;
    background: #fff;
    @include easeOut;
  }
}

4. now within the .menu-btn{} create a new rule for .btn-line
	-this will create the 3 white lines for the menu icon on 
	the top right of the webpage
	-the style above will contain the upated code ^
</_menu.scss>

<main.js>
// Select DOM items
const menuBtn = document.querySelector(".menu-btn");
const menu = document.querySelector(".menu");
const menuNav = document.querySelector(".menu-nav");
const menuBranding = document.querySelector(".menu-branding");

// Selects all nav-items
const navItems = document.querySelectorAll("nav-item");

//Set Initial State Of Menu
let showMenu = false;

menuBtn.addEventListener("click", toggleMenu);

function toggleMenu() {
  if (!showMenu) {
    menuBtn.classList.add("close");
    menu.classList.add("show");
    menuNav.classList.add("show");
    menuBranding.classList.add("show");
    navItems.forEach(item => item.classList.add("show"));
  } else {
    menuBtn.classList.remove("close");
    menu.classList.remove("show");
    menuNav.classList.remove("show");
    menuBranding.classList.remove("show");
    navItems.forEach(item => item.classList.remove("show"));
  }
}

</main.js>

<back to _menu.scss>
1. Within the .menu-btn {}:
-This is the css styling used to turn the menu icon to an X upon clicking
//Rotate Into X with Menu Lines
  &.close {
    transform: rotate(180deg);

    .btn-line {
      // Line 1 - Going To Rotate
      &:nth-child(1) {
        transform: rotate(45deg) translate(5px, 5px); //translate(x, y values)
      }
      // Line 2 - Hide
      &:nth-child(2) {
        opacity: 0;
      }

      // Line 3 - Rotate
      &:nth-child(3) {
        transform: rotate(-45deg) translate(7px, -6px); //translate(x, y values)
      }
    }
  }
</back to _menu.scss>

-run your commit before you move on to the next video
	-git add .
	-git commit -m 'Menu button, javascript & rotate'


**Video 4** - Menu Overlay and Responsiveness
<Menu Overlay>
1. create a new style. This is going to be for the nav(.menu)
	<right side of overlay - navigation links>
	.menu {
  position: fixed;
  top: 0;
  width: 100%;
  opacity: 0.9;
  visibility: hidden;

  &.show {
    visibility: visible;
  }

  &-branding,
  &-nav {
    display: flex;
    flex-flow: column wrap; //up & down
    align-items: center;
    justify-content: center;
    float: left;
    width: 50%;
    height: 100vh; //takes up 100 slices aka the entire visible webpage
    overflow: hidden; //no scrollbars
  }

  &-nav {
    margin: 0;
    padding: 0;
    background: darken($primary-color, 5); //makes the right side darker shade of the $primary-color
    list-style: none;
    transform: translate3d(0, -100%, 0); //pushes the slide from top to bottom
    @include easeOut;

    &.show {
      // Slide in from top
      transform: translate3d(0, 0, 0); //nav-menu will be moved to default spot
    }
  }
}
	</right side of overlay - navigation links>
	1.right under the &-nav styling:
	//   Branding Side
	&-branding {
		background: $primary-color;
		@include easeOut;
		transform: translate3d(0, 100%, 0); //pushes the slide from top to bottom

		&.show {
		// Slide in from bottom
		transform: translate3d(0, 0, 0);
		}

		// picture of yourself
		.portrait {
		width: 250px;
		height: 250px;
		background: url("../img/portrait.jpg");
		border-radius: 50%;
		border: solid 3px $secondary-color;
		}
	}
	<left side of overlay - icon>
	</<left side of overlay - icon>
Note: When we use the '&' sign it represents the same name as it's parent.
inside .menu we have &-nav or in other words 'menu-nav';

1. When you open the menu, we want the nav items to slide in from the right
// Delay each nav item slide by 0.1s from 1-4(number of nav links)
@for $x from 1 through 4 {
  .nav-item:nth-child(#{$x}) {
    transition-delay: $x *
      0.1s; //1-4 * 0.1s. this creates a domino effect where one link follows the other
  }
}
-like a for loop we can use @for in css to loop through elements which in this case is our nav-items
-we use .nav-item:nith-child(#{$x}) which will loop through the 4 nav items. 
	-we have to write the code as (#{$x}) as this is the syntax for it when using @for


<styling the nav items>
1.under the  .nav-item styling we should make the current page we're on link the secondary color
&.current > a {
	color: $secondary-color;
}
2. We should also make the nav links a bigger font as well as have them change to the secondary color upon hover:
.nav-link {
    display: inline-block;
    position: relative; //relative to parent
    font-size: 30px;
    text-transform: uppercase;
    padding: 1rem 0;
    font-weight: 300;
    color: #fff;
    text-decoration: none;
    @include easeOut;

    &.current > a {
      color: $secondary-color;
    }

    &:hover {
      color: $secondary-color;
    }
  }
</styling the nav items>

- git commit add .
- git commit -m 'Menu overlay'
</Menu Overlay>

<Responsiveness>
1. We are going to work inside the _config.scss file now
2. create a new comment/section 'Media Query Mixins'
3. We will be creating 3 different mixins for 4 different sizes
	-@content: anything you put inside the mixin in another file you can just add that mixin and it will be put inside the @content
@mixin mediaSm {
  @media screen and (max-width: 500px) {
    @content;
  }
}

@mixin mediaMd {
  @media screen and (max-width: 768px) {
    @content;
  }
}

@mixin mediaLg {
  @media screen and (min-width: 769px) and (max-width: 1700px) {
    @content;
  }
}

@mixin mediaXL {
  @media screen and (min-width: 1171px) {
    @content;
  }
}

1. Create a new partial scss: _mobile.scss and include it within the main AT THE BOTTOM!!!
2. Remember to always run in the node terminal 'npm run sass' everytime
you create a new partial!
3. Inside _mobile.scss:
	-add 4 @include's for each of your media queries
4. Within @include mediaMd:
@include mediaMd {
  main {
    align-items: center;
    text-align: center;

    .lg-heading {
        line-height: 1; // fixes the large gap of space between first and last name
		margin=bottom: 1rem;
    }
  }
  // Disable the floats and make the widths for each side of the navigation overlay 100% so they are each on their own line
  ul.menu-nav,
  div.menu-branding {
    float: none;
    width: 100%;
    min-height: 0;

    &.show {
      transform: translate3d(0, 0, 0);
    }
  }

// Add the translated3d's for the smaller screen media queries so that the navigations are coming from the left/right as opposed to up/down
  .menu-nav {
    height: 75vh;
    transform: translate3d(-100%, 0, 0);
    font-size: 24px;
  }

  .menu-branding {
    height: 25vh;
    transform: translate3d(100%, 0, 0);

// Since we are making the website responsive, it is is better to add a smaller image of the portrait image we originally have for an over aesthetically pleasing website
    .portrait {
      background: url("../img/portrait_small.jpg");
      width: 150px;
      height: 150px;
    }
  }
}
}

//For smaart phones, we are going to add a margin-top of 10vh to add a little spacing to the website to make sure the webpage looks good
// Smartphones
@include mediaSm {
  main#home h1 {
    margin-top: 10vh;
  }
}
</Responsiveness>

-git add .
-git commit -m 'Added Media Queries and made menu overlay responsive'


**Video 5** About Page With CSS grid 
1. Within the _config.scss create a function that returns a white or black text depending on parameters:
//  Set Text Color
@function set-text-color($color) {
  @if (lightness($color) > 40) {
    @return #000;
  } @else {
    @return #fff;
  }
}
-add the new function to the body{} in your main.scss under the background property
-change the color styling in menu.scss of your btn-line and nav-links as well with set-text-color function:
	-set-text-color($primary-color)

1.Create about.html page within the dist folder
2.Basic html setup for the webpage

<Grid CSS>
1. open main.scss
// Grid CSS for about.html
.about-info {
  display: grid;
  grid-gap: 30px;
  grid-template-areas:
    "bioimage bio bio"
    "job1 job2 job3";
  grid-template-columns: repeat(3, 1fr); //repeats 3 times 1fr

  .bio-image {
    grid-area: bioimage;
    margin: auto;
    border-radius: 50%;
    border: $secondary-color 3px solid;
  }

  .bio {
    grid-area: bio;
    font-size: 1.5rem;
  }

  .job-1 {
    grid-area: job1;
  }
  .job-2 {
    grid-area: job2;
  }
  .job-3 {
    grid-area: job3;
  }

  .job {
    background: lighten($primary-color, 5);
    padding: 0.5rem;
    border-bottom: $secondary-color 5px solid;
  }
}

#main-footer {
  text-align: center;
  padding: 1rem;
  background: darken($primary-color, 10);
  color: set-text-color($primary-color);
  height: 60px;
}

</Grid CSS>

<Making the about.html responsive>
1.Within the _mobile.scss:
-inside the mediaMd:
.about-info {
    grid-template-areas:
      "bioimage"
      "bio"
      "job1"
      "job2"
      "job3";
    grid-template-columns: 1fr;
  }
//This stacks the grid on top of each other as opposed to the default layout 
so users on smaller devices can view them
</Making the about.html responsive>

-git add .
-git commit -m 'Text color function & about page'

**Video 6** - Work & Contact Pages
1.Create work.html
2.copy and paste the about.html code into the new work.html
3. Delete everything within the about-info div and replace about-info with projects
4. add 5 item divs to place the 5 dummy projects

5.Open main.scss
6. See Work/Projects section as well as the button styles section
7. Here we are using Grid CSS again to setup our layout
8. We need to make this responsive; go to _mobile.scss:
-.projects {
    grid-template-columns: repeat(4, 1fr);
  }
-XL screens: 4
-L screens: 3
-M screens: 2
- S screens: 1

-git add .
-git commit -m 'Work page with and Responsiveness'


<Contact Page>
1. Copy and Paste everything within the about.html
2. see //Contact page section in main.scss
</Contact Page>


**Video 7**  Website Deployment